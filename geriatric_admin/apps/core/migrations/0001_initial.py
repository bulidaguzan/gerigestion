# Generated by Django 4.2.23 on 2025-07-26 18:49

import apps.core.managers
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import encrypted_model_fields.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('employee_id', models.CharField(help_text='Unique employee identifier', max_length=20, unique=True)),
                ('role', models.CharField(choices=[('administrator', 'Administrator'), ('nurse', 'Nurse'), ('caregiver', 'Caregiver'), ('doctor', 'Doctor'), ('manager', 'Manager'), ('receptionist', 'Receptionist')], help_text="User's primary role in the system", max_length=20)),
                ('phone_number', encrypted_model_fields.fields.EncryptedCharField(blank=True, help_text="User's phone number (encrypted)")),
                ('emergency_contact_name', encrypted_model_fields.fields.EncryptedCharField(blank=True, help_text='Emergency contact name (encrypted)')),
                ('emergency_contact_phone', encrypted_model_fields.fields.EncryptedCharField(blank=True, help_text='Emergency contact phone (encrypted)')),
                ('date_of_birth', models.DateField(blank=True, help_text="User's date of birth", null=True)),
                ('hire_date', models.DateField(blank=True, help_text='Date when user was hired', null=True)),
                ('is_multi_center_admin', models.BooleanField(default=False, help_text='Whether user can access multiple centers')),
                ('failed_login_attempts', models.PositiveIntegerField(default=0, help_text='Number of consecutive failed login attempts')),
                ('last_failed_login', models.DateTimeField(blank=True, help_text='Timestamp of last failed login attempt', null=True)),
                ('account_locked_until', models.DateTimeField(blank=True, help_text='Account locked until this timestamp', null=True)),
                ('password_changed_at', models.DateTimeField(blank=True, help_text='When password was last changed', null=True)),
                ('must_change_password', models.BooleanField(default=False, help_text='Whether user must change password on next login')),
                ('two_factor_enabled', models.BooleanField(default=False, help_text='Whether two-factor authentication is enabled')),
                ('two_factor_secret', encrypted_model_fields.fields.EncryptedCharField(blank=True, help_text='Two-factor authentication secret (encrypted)')),
                ('preferences', models.JSONField(blank=True, default=dict, help_text='User preferences and settings')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'core_user',
            },
            managers=[
                ('objects', apps.core.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='GeriatricCenter',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this record is active (soft delete functionality)')),
                ('version', models.PositiveIntegerField(default=1, help_text='Version number for optimistic locking')),
                ('notes', models.TextField(blank=True, help_text='Additional notes or comments about this record')),
                ('name', models.CharField(help_text='Name of the geriatric center', max_length=200)),
                ('code', models.CharField(help_text='Unique code for the center', max_length=10, unique=True)),
                ('address', encrypted_model_fields.fields.EncryptedTextField(help_text='Physical address of the center (encrypted)')),
                ('phone_number', encrypted_model_fields.fields.EncryptedCharField(help_text='Main phone number (encrypted)')),
                ('email', models.EmailField(help_text='Main email address', max_length=254)),
                ('license_number', encrypted_model_fields.fields.EncryptedCharField(help_text='Operating license number (encrypted)')),
                ('capacity', models.PositiveIntegerField(help_text='Maximum resident capacity')),
                ('settings', models.JSONField(blank=True, default=dict, help_text='Center-specific configuration settings')),
                ('administrator', models.ForeignKey(help_text='Center administrator', on_delete=django.db.models.deletion.PROTECT, related_name='administered_centers', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Geriatric Center',
                'verbose_name_plural': 'Geriatric Centers',
                'db_table': 'core_geriatric_center',
            },
        ),
        migrations.CreateModel(
            name='UserCenterAssignment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this record is active (soft delete functionality)')),
                ('version', models.PositiveIntegerField(default=1, help_text='Version number for optimistic locking')),
                ('notes', models.TextField(blank=True, help_text='Additional notes or comments about this record')),
                ('is_primary', models.BooleanField(default=False, help_text="Whether this is the user's primary center")),
                ('assigned_at', models.DateTimeField(auto_now_add=True, help_text='When user was assigned to this center')),
                ('assigned_by', models.ForeignKey(help_text='User who made this assignment', on_delete=django.db.models.deletion.PROTECT, related_name='center_assignments_made', to=settings.AUTH_USER_MODEL)),
                ('center', models.ForeignKey(help_text='Center being assigned to user', on_delete=django.db.models.deletion.CASCADE, to='core.geriatriccenter')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='User being assigned to center', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Center Assignment',
                'verbose_name_plural': 'User Center Assignments',
                'db_table': 'core_user_center_assignment',
                'unique_together': {('user', 'center')},
            },
        ),
        migrations.AddField(
            model_name='user',
            name='centers',
            field=models.ManyToManyField(help_text='Centers this user has access to', through='core.UserCenterAssignment', to='core.geriatriccenter'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='AuditTrail',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When the action occurred')),
                ('action', models.CharField(choices=[('CREATE', 'Create'), ('UPDATE', 'Update'), ('DELETE', 'Delete'), ('VIEW', 'View'), ('LOGIN', 'Login'), ('LOGOUT', 'Logout'), ('EXPORT', 'Export'), ('IMPORT', 'Import')], help_text='Type of action performed', max_length=10)),
                ('object_id', models.CharField(blank=True, help_text='ID of the object that was modified', max_length=255, null=True)),
                ('changed_fields', models.JSONField(blank=True, default=dict, help_text='Fields that were changed and their old/new values')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the user', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string from the request')),
                ('additional_data', models.JSONField(blank=True, default=dict, help_text='Additional context data')),
                ('center', models.ForeignKey(blank=True, help_text='Center context for the action', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.geriatriccenter')),
                ('content_type', models.ForeignKey(blank=True, help_text='Type of object that was modified', null=True, on_delete=django.db.models.deletion.PROTECT, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(blank=True, help_text='User who performed the action', null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Audit Trail Entry',
                'verbose_name_plural': 'Audit Trail Entries',
                'db_table': 'core_audit_trail',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['timestamp'], name='core_audit__timesta_006128_idx'), models.Index(fields=['user'], name='core_audit__user_id_17bdff_idx'), models.Index(fields=['center'], name='core_audit__center__706136_idx'), models.Index(fields=['action'], name='core_audit__action_97bbb2_idx'), models.Index(fields=['content_type', 'object_id'], name='core_audit__content_0e2553_idx')],
            },
        ),
    ]
